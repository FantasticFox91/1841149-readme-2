import { PrismaClient } from '@prisma/client';

const FIRST_TAG_UUID = '77646648-c595-4e49-89f0-fabfdd311010';
const SECOND_TAG_UUID = 'f7c13f14-e2de-4958-be55-1918f0a86c1f';

const FIRST_POST_UUID = 'b182f2f1-740f-4d6e-a304-e9a159f236e6';
const SECOND_POST_UUID = '290c23ed-5c50-42d9-a258-aa30ffd58f36';
const THIRD_POST_UUID = 'd956e310-2e54-43bc-b92e-703031c2b659';
const FOURTH_POST_UUID = 'd47c83b3-51f0-4b0a-9f6a-6201d8f3a57c';
const FIFTH_POST_UUID = '72c7aa70-c2c1-43ec-8662-56be13d9d19a';
const SIXTH_POST_UUID = '46ed8856-bb03-4344-bbef-2cb0cc59aa24';

const FIRST_USER_ID = '686d211ea0db1cee2faab282';
const SECOND_USER_ID = '686d22155a6bfd4bd6a24947';

function getTags() {
  return [
    { id: FIRST_TAG_UUID, title: '–∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å' },
    { id: SECOND_TAG_UUID, title: '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
  ];
}

function getTextPosts() {
  return [
    {
      id: FIRST_POST_UUID,
      authorId: FIRST_USER_ID,
      type: 'TEXT' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: FIRST_TAG_UUID },
          { id: SECOND_TAG_UUID },
        ]
      },
      textPost: {
        create: {
          title: `–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`,
          announce: `–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.`,
          text: `–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. JavaScript –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º —è–∑—ã–∫–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∫–∞–∫ React, Vue –∏ Angular —É–ø—Ä–æ—â–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ Node.js, Python, Java –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ (PostgreSQL, MySQL), —Ç–∞–∫ –∏ NoSQL (MongoDB, Redis), –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker, Kubernetes –∏ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.`,
        }
      }
    },
    {
      id: SECOND_POST_UUID,
      authorId: SECOND_USER_ID,
      type: 'TEXT' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: SECOND_TAG_UUID },
        ]
      },
      textPost: {
        create: {
          title: `–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`,
          announce: `–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.`,
          text: `–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏. –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. JavaScript –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º —è–∑—ã–∫–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞, –∞ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∫–∞–∫ React, Vue –∏ Angular —É–ø—Ä–æ—â–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ Node.js, Python, Java –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ (PostgreSQL, MySQL), —Ç–∞–∫ –∏ NoSQL (MongoDB, Redis), –∏–≥—Ä–∞—é—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker, Kubernetes –∏ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –ø–æ–º–æ–≥–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.`,
        }
      }
    }
  ]
}

function getVideoPosts() {
  return [
    {
      id: THIRD_POST_UUID,
      authorId: FIRST_USER_ID,
      type: 'VIDEO' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: SECOND_TAG_UUID },
        ]
      },
      videoPost: {
        create: {
          title: '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
          videoLink: 'https://youtube.com/watch?v=programming-basics-101',
        }
      }
    },
  ]
}

function getQuotePosts() {
  return [
    {
      id: FOURTH_POST_UUID,
      authorId: FIRST_USER_ID,
      type: 'QUOTE' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: FIRST_TAG_UUID },
          { id: SECOND_TAG_UUID },
        ]
      },
      quotePost: {
        create: {
          quote: '–ö–æ–¥ - —ç—Ç–æ –ø–æ—ç–∑–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–¥—É–º–∞–Ω–∞ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞.',
          quoteAuthor: '–°—Ç–∏–≤ –î–∂–æ–±—Å',
        }
      }
    },
  ]
}

function getPhotoPosts() {
  return [
    {
      id: FIFTH_POST_UUID,
      authorId: FIRST_USER_ID,
      type: 'PHOTO' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: FIRST_TAG_UUID },
          { id: SECOND_TAG_UUID },
        ]
      },
      photoPost: {
        create: {
          photoLink: 'https://example.com/photos/modern-architecture-building.jpg',
        }
      }
    },
  ]
}

function getLinkPosts() {
  return [
    {
      id: SIXTH_POST_UUID,
      authorId: SECOND_USER_ID,
      type: 'LINK' as const,
      status: 'PUBLISHED' as const,
      tags: {
        connect: [
          { id: FIRST_TAG_UUID },
          { id: SECOND_TAG_UUID },
        ]
      },
      linkPost: {
        create: {
          link: 'https://github.com/microsoft/vscode',
          description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ –æ—Ç Microsoft —Å –æ–≥—Ä–æ–º–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π',
        }
      }
    },
  ]
}

function getComments() {
  return [
    {
      text: '–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è! –û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.',
      authorId: FIRST_USER_ID,
      postId: FIRST_POST_UUID,
    },
    {
      text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω —Å –∞–≤—Ç–æ—Ä–æ–º.',
      authorId: SECOND_USER_ID,
      postId: THIRD_POST_UUID,
    }
  ]
}

function getLikes() {
  return [
    {
      userId: FIRST_USER_ID,
      postId: SIXTH_POST_UUID,
    },
    {
      userId: SECOND_USER_ID,
      postId: FOURTH_POST_UUID,
    }
  ]
}

async function seedDb(prismaClient: PrismaClient) {
  const mockTags = getTags();
  for (const tag of mockTags) {
    await prismaClient.tag.upsert({
      where: { id: tag.id },
      update: {},
      create: {
        id: tag.id,
        title: tag.title
      }
    });
  }

  const mockTextPosts = getTextPosts();
  const mockVideoPosts = getVideoPosts();
  const mockQuotePosts = getQuotePosts();
  const mockPhotoPosts = getPhotoPosts();
  const mockLinkPosts = getLinkPosts();

  for (const post of mockTextPosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        authorId: post.authorId,
        type: post.type,
        status: post.status,
        tags: post.tags,
        textPost: post.textPost,
      }
    })
  }

  for (const post of mockVideoPosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        authorId: post.authorId,
        type: post.type,
        status: post.status,
        tags: post.tags,
        videoPost: post.videoPost,
      }
    })
  }

  for (const post of mockQuotePosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        authorId: post.authorId,
        type: post.type,
        status: post.status,
        tags: post.tags,
        quotePost: post.quotePost,
      }
    })
  }

  for (const post of mockPhotoPosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        authorId: post.authorId,
        type: post.type,
        status: post.status,
        tags: post.tags,
        photoPost: post.photoPost
      }
    })
  }

  for (const post of mockLinkPosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        authorId: post.authorId,
        type: post.type,
        status: post.status,
        tags: post.tags,
        linkPost: post.linkPost,
      }
    })
  }

  const mockComments = getComments();

  for (const comment of mockComments) {
    await prismaClient.comment.create({
      data: {
        text: comment.text,
        authorId: comment.authorId,
        postId: comment.postId,
      }
    })
  }

  const mockLikes = getLikes();

  for (const like of mockLikes) {
    await prismaClient.like.create({
      data: {
        authorId: like.userId,
        postId: like.postId,
      }
    })
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
